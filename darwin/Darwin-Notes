https://svn.code.sf.net/p/darwinop/code/trunk/darwin

########################################

launch UI w/ root
gksudo nautilus

root pw: 111111

########################################

Startup script found here:
/etc/rc.local

########################################
Changes to framework need to have Linux/build make clean'd

Build from project/ directories, make clean && make

###################################
CM-730 -
Holes: 
68mm f-b
62mm s-s

Bounding Box:
95 wide
76 depth
35 height

###################################
MotionManager.cpp handles servo writes
Action.cpp is on 125hz timer, handles interpolation

#######################################
JOINTDATA
#######################################

/darwin/Framework/scr/motion/JointData.cpp
//Body part definitions/enabling

Line 55: 	SetEnable(ID_HEAD_ROLL,		enable, exclusive);
Line 68:
	SetEnable(ID_R_ELBOW_YAW, 	enable, exclusive);
	SetEnable(ID_R_WRIST_YAW,	enable, exclusive);
	SetEnable(ID_R_GRIPPER,		enable, exclusive);
Line 83:
	SetEnable(ID_L_ELBOW_YAW, 	enable, exclusive);
	SetEnable(ID_L_WRIST_YAW,	enable, exclusive);
	SetEnable(ID_L_GRIPPER,		enable, exclusive);

Config Servo IDs/Name here:

/Framework/include/JointData.h

must be in sequential IDs or dxl_monitor won't draw correctly. If adding servos, need to update a few of the programs found in /project as they are hard coded for 20 servos.

#################################################################
dxl_monitor needs updating in order to recognize new servos, otherwise shows UNKNOWN.

Have to update /Linux/project/dxl_monitor/cmd_process.cpp

Added: 

	case JointData::ID_HEAD_ROLL:
		return "HEAD_ROLL";

	case JointData::ID_R_ELBOW_YAW:
		return "R_ELBOW_YAW";

	case JointData::ID_L_ELBOW_YAW:
		return "L_ELBOW_YAW";

	case JointData::ID_R_WRIST_YAW:
		return "R_WRIST_YAW";

	case JointData::ID_L_WRIST_YAW:
		return "L_WRIST_YAW";

	case JointData::ID_R_GRIPPER:
		return "R_GRIPPER";

	case JointData::ID_L_GRIPPER:
		return "L_GRIPPER";

############################################################
ACTION_EDITOR
############################################################


g calls GoCmd (cmd_process.cpp)

play calls PlayCmd


action_editor also needs an update to recognize new servos.

(does not move servos at ID 20+ currently)

Have to update /Linux/project/action_editor/cmd_process.cpp

// change ID_HEAD_TILT to last servo ID name

line 85:  if(id >= JointData::ID_R_SHOULDER_PITCH && id <= JointData::ID_HEAD_ROLL)

line 1134:  
			if(list[i] >= JointData::ID_R_SHOULDER_PITCH && list[i] <= JointData::NUMBER_OF_JOINTS)




Update DrawPage....

void DrawPage()
{
	int old_col = Col;
	int old_row = Row;

	system("clear");
	// 80    01234567890123456789012345678901234567890123456789012345678901234567890123456789     //24
	printf( "ID: 1(R_SHO_PITCH)[    ]                                                       \n" );//0
	printf( "ID: 2(L_SHO_PITCH)[    ]                                       Page Number:    \n" );//1
	printf( "ID: 3(R_SHO_ROLL) [    ]                                        Address:       \n" );//2
	printf( "ID: 4(L_SHO_ROLL) [    ]                                         Play Count:   \n" );//3
	printf( "ID: 5(R_ELBOW)    [    ]                                          Page Step:   \n" );//4
	printf( "ID: 6(L_ELBOW)    [    ]                                         Page Speed:   \n" );//5
	printf( "ID: 7(R_HIP_YAW)  [    ]                                         Accel Time:   \n" );//6
	printf( "ID: 8(L_HIP_YAW)  [    ]                                       Link to Next:   \n" );//7
	printf( "ID: 9(R_HIP_ROLL) [    ]                                       Link to Exit:   \n" );//8
	printf( "ID:10(L_HIP_ROLL) [    ]                                                       \n" );//9
	printf( "ID:11(R_HIP_PITCH)[    ]                                                       \n" );//0
	printf( "ID:12(L_HIP_PITCH)[    ]                                                       \n" );//1
	printf( "ID:13(R_KNEE)     [    ]                                                       \n" );//2
	printf( "ID:14(L_KNEE)     [    ]                                                       \n" );//3
	printf( "ID:15(R_ANK_PITCH)[    ]                                                       \n" );//4
	printf( "ID:16(L_ANK_PITCH)[    ]                                                       \n" );//5
	printf( "ID:17(R_ANK_ROLL) [    ]                                                       \n" );//6
	printf( "ID:18(L_ANK_ROLL) [    ]                                                       \n" );//7
	printf( "ID:19(HEAD_PAN)   [    ]                                                       \n" );//8
	printf( "ID:20(HEAD_TILT)  [    ]                                                       \n" );//9
	printf( "ID:21(R_ELBOW_YAW)[    ]                                                       \n" );//0
	printf( "ID:22(L_ELBOW_YAW)[    ]                                                       \n" );//1
	printf( "ID:23(R_WRIST_YAW)[    ]                                                       \n" );//2
	printf( "ID:24(L_WRIST_YAW)[    ]                                                       \n" );//3
	printf( "ID:25(R_GRIPPER)  [    ]                                                       \n" );//4
	printf( "ID:26(L_GRIPPER)  [    ]                                                       \n" );//5
	printf( "ID:27(HEAD_ROLL)  [    ]                                                       \n" );//6
	printf( "   PauseTime      [    ]                                                       \n" );//7

	if( Page.header.schedule == Action::SPEED_BASE_SCHEDULE )
		printf( "   Speed          [    ]                                                       \n" );//1
	else if( Page.header.schedule == Action::TIME_BASE_SCHEDULE )
		printf( "   Time(x 8msec)  [    ]                                                       \n" );//1
	
	printf( "                   STP7  STP0 STP1 STP2 STP3 STP4 STP5 STP6                    \n" );//2
	printf( "]                                                                              " );  // 3

	for(int i=0; i<=Action::MAXNUM_STEP; i++ )
		DrawStep(i);

	// Draw Compliance slope
	for( int id=JointData::ID_R_SHOULDER_PITCH; id<JointData::NUMBER_OF_JOINTS; id++ )
	{
		GoToCursor(CWSLOPE_COL, id -1);
		printf( "%.1d%.1d", Page.header.slope[id]>>4, Page.header.slope[id]&0x0f );
	}

	// Draw Page parameter
	GoToCursor( PAGEPARAM_COL, PLAYCOUNT_ROW );
	printf( "%.3d", Page.header.repeat );

	GoToCursor( PAGEPARAM_COL, STEPNUM_ROW );
	printf( "%.3d", Page.header.stepnum );
		
	GoToCursor( PAGEPARAM_COL, PLAYSPEED_ROW );
	printf( "%.3d", Page.header.speed );

	GoToCursor( PAGEPARAM_COL, ACCEL_ROW );
	printf( "%.3d", Page.header.accel );

	GoToCursor( PAGEPARAM_COL, NEXT_ROW );
	printf( "%.3d", Page.header.next );

	GoToCursor( PAGEPARAM_COL, EXIT_ROW );
	printf( "%.3d", Page.header.exit );

	// Draw Page information
	DrawName();

	GoToCursor(PAGENUM_COL, PAGENUM_ROW);
	printf( "%.4d", indexPage );

	GoToCursor(ADDR_COL, ADDR_ROW);
	printf( "0x%.5X", (int)(indexPage*sizeof(Action::PAGE)) );

	DrawStepLine(false);

	GoToCursor(old_col, old_row);
}



Have to update /Linux/project/action_editor/cmd_process.h


#define PROGRAM_VERSION		"v1.01"
#define SCREEN_COL			80
#define SCREEN_ROW			31

...line 49/50

#define ID_20_ROW	19

#define ID_21_ROW	20
#define ID_22_ROW	21
#define ID_23_ROW	22
#define ID_24_ROW	23
#define ID_25_ROW	24
#define ID_26_ROW	25
#define ID_27_ROW	26

#define PAUSE_ROW	27
#define SPEED_ROW	28
#define CMD_ROW		30


############################################################

offset_tuner also needs an update to recognize new servos. (very similar to action_editor)

CANNOT SCROLL DOWN CURSOR PAST ROW 20, saving ID 28 to config?


Have to update /Linux/project/offset_tuner/cmd_process.cpp

Line 28/29
Added 7 servos to InitPose array:

//                           1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20
int InitPose[28] = {2047, 1480, 2610, 1747, 2343, 2147, 1944, 2047, 2047, 2047, 2047, 2013, 2080, 2047, 2047, 2063, 2030, 2047, 2047, 2047, 2170, 2047, 2047, 2047, 2047, 2047, 2047, 2047};

Line 92:
		if(id >= JointData::ID_R_SHOULDER_PITCH && id <= JointData::ID_HEAD_ROLL)

Line 324:


    printf( "ID:20(HEAD_TILT)    [    ]        [    ]|                                      \n" );//9
    printf( "ID:21(R_ELBOW_YAW)  [    ]        [    ]|                                      \n" );//0
    printf( "ID:22(L_ELBOW_YAW)  [    ]        [    ]|                                      \n" );//1
    printf( "ID:23(R_WRIST_YAW)  [    ]        [    ]|                                      \n" );//2
    printf( "ID:24(L_WRIST_YAW)  [    ]        [    ]|                                      \n" );//3
    printf( "ID:25(R_GRIPPER)    [    ]        [    ]|                                      \n" );//4
    printf( "ID:26(L_GRIPPER)    [    ]        [    ]|                                      \n" );//5
    printf( "ID:27(HEAD_ROLL)    [    ]        [    ]|                                      \n" );//6
    printf( "                     GOAL  OFFSET MODVAL PRSPOS ERRORS P_GAIN I_GAIN D_GAIN    \n" );//7
    printf( "]                                                                              " );  //8


Have to update /Linux/project/offset_tuner/cmd_process.h

Line 8: #define SCREEN_ROW			29 (added 7 to 22)

Line 45:

#define ID_20_ROW	19

#define ID_21_ROW	20
#define ID_22_ROW	21
#define ID_23_ROW	22
#define ID_24_ROW	23
#define ID_25_ROW	24
#define ID_26_ROW	25
#define ID_27_ROW	26

#define CMD_ROW		28

##############################################################

 exit               Exits the program.
 re                 Refreshes the screen.
 b                  Move to previous page.
 n                  Move to next page.
 page [index]       Move to page [index].
 list               View list of pages.
 new                Clears data of current page and initializes page.
 copy [index]       Copy data from page [index].
 set [value]        Sets value on cursor [value].
 save               Saves changes.
 play               Motion playback of current page.
 g [index]          Motion playback of STP[index].
 name               Name for current page
 time               Change time base playing.
 speed              Change speed base playing.
 w [index]          Overwrites data from STP[index] with STP7.
 i                  Inserts data from STP7 to STP0. 
                    Moves data from STP[x] to STP[x+1].
 i [index]          Inserts data from STP7 to STP[index]. 
                    Moves data from STP[index] to STP[index+1].
 m [index] [index2] Moves data from [index] to [index2] step.
 d [index]          Deletes data from STP[index]. 
                    Pushes data from STP[index] to STP[index-1].
 on/off             Turn On/Off torque from ALL actuators.
 on/off [index1] [index2] ...  
                    turns On/Off torque from ID[index1] ID[index2]...

       Copyright ROBOTIS CO.,LTD.

 Press any key to continue...
##############################################################


Debugging in MotionManager.cpp

Line 310/311
//		fprintf(stderr, "Enable[%d] : %d \n", id, MotionStatus::m_CurrentJoints.GetEnable(id));
                fprintf(stderr, "Enable[%d] : %d \n", id, Action::GetInstance()->m_Joint.GetEnable(id));
